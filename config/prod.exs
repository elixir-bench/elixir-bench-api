use Mix.Config

# For production, we often load configuration from external
# sources, such as your system environment. For this reason,
# you won't find the :http configuration below, but set inside
# ElixirBenchWeb.Endpoint.init/2 when load_from_system_env is
# true. Any dynamic configuration should be done there.
#
# Don't forget to configure the url host to something meaningful,
# Phoenix uses this information when generating URLs.
#
# Finally, we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the mix phx.digest task
# which you typically run after static files are built.
config :elixir_bench, ElixirBenchWeb.Endpoint,
  # Dynamically verify and set Endpoint env variables
  load_from_system_env: true,
  http: [],
  server: true,
  url: [host: "elixirbench.org", port: 80],
  secret_key_base: "${SECRET_KEY_BASE}"

# Configure your database
config :elixir_bench, ElixirBench.Repo,
  # Dynamically verify and set Repo env variables
  load_from_system_env: true,
  adapter: Ecto.Adapters.Postgres,
  ssl: true,
  pool_size: 1

# Do not print debug messages in production
config :logger, level: :info

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :elixir_bench, ElixirBenchWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [:inet6,
#               port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :elixir_bench, ElixirBenchWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# Set the Github client
config :elixir_bench, :github_client, ElixirBench.Github.ClientHTTP
